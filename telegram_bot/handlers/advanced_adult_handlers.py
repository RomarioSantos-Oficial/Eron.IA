"""
Sistema Adulto Avan√ßado para Telegram Bot
Integra√ß√£o completa com AdultPersonalitySystem
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler
from core.adult_personality_system import AdultPersonalitySystem

# Estados para conversa√ß√£o avan√ßada
ADULT_PERSONALITY_SELECT = 35
ADULT_ADVANCED_CONFIG = 36
ADULT_PREFERENCES_SETUP = 37
ADULT_MOOD_SELECTION = 38

logger = logging.getLogger(__name__)
adult_system = AdultPersonalitySystem()

async def adult_config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /adult_config - Menu principal de configura√ß√£o"""
    user_id = str(update.effective_user.id)
    
    # Verificar se modo adulto est√° ativo
    try:
        from core.check import check_age
        adult_status = check_age(user_id)
        
        if not adult_status.get('adult_mode_active'):
            await update.message.reply_text(
                "‚ùå **Modo adulto n√£o est√° ativo**\n\n"
                "Use /adult_mode para ativar primeiro.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
    except:
        await update.message.reply_text(
            "‚ùå Erro ao verificar status adulto. Use /adult_mode primeiro.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # Verificar se j√° tem perfil avan√ßado
    profile = adult_system.get_adult_profile(user_id)
    
    if profile:
        return await show_existing_profile_menu(update, context, profile)
    else:
        return await show_personality_selection_menu(update, context)

async def show_personality_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostrar menu de sele√ß√£o de personalidade"""
    personalities = adult_system.get_personality_types()
    
    keyboard = []
    for personality_id, personality_data in personalities.items():
        emoji = personality_data.get('emoji', 'üé≠')
        name = personality_data.get('name', personality_id.title())
        description = personality_data.get('short_description', '')
        
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {name} - {description[:20]}...", 
            callback_data=f"select_personality_{personality_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_adult_config")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üé≠ **CONFIGURA√á√ÉO AVAN√áADA ADULTA**

Escolha sua personalidade base:

ÔøΩ **Rom√¢ntico Apaixonado** - Conex√£o emocional profunda
üéØ **Brincalh√£o Sedutor** - Divertido e espont√¢neo  
ÔøΩ **Intensamente Apaixonado** - Paix√£o ardente e intensa
ÔøΩ **Dominante Carinhoso** - Lideran√ßa carinhosa
üíñ **Devotado Carinhoso** - Foco em agradar e cuidar
ÔøΩ **Misterioso Sedutor** - Charme enigm√°tico

Ap√≥s escolher, voc√™ poder√° ajustar todos os par√¢metros!
"""
    
    await update.message.reply_text(
        text, reply_markup=reply_markup, parse_mode='Markdown'
    )
    return ADULT_PERSONALITY_SELECT

async def show_existing_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, profile):
    """Mostrar menu para perfil existente"""
    personality_type = profile.get('personality_type', 'N√£o definido')
    personalities = adult_system.get_personality_types()
    personality_info = personalities.get(personality_type, {})
    
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è Ajustar Configura√ß√µes", callback_data="adjust_adult_config")],
        [InlineKeyboardButton("üé≠ Mudar Personalidade", callback_data="change_personality")],
        [InlineKeyboardButton("üå°Ô∏è Definir Humor", callback_data="set_mood")],
        [InlineKeyboardButton("üìä Ver Estat√≠sticas", callback_data="view_adult_stats")],
        [InlineKeyboardButton("üîÑ Resetar Perfil", callback_data="reset_adult_profile")],
        [InlineKeyboardButton("‚ùå Fechar", callback_data="close_adult_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    emoji = personality_info.get('emoji', 'üé≠')
    name = personality_info.get('name', personality_type.title())
    
    text = f"""
üéØ **SEU PERFIL ADULTO ATUAL**

üé≠ **Personalidade**: {emoji} {name}
üìä **Configura√ß√µes**:
‚Ä¢ Confian√ßa: {profile.get('confidence_level', 0)}%
‚Ä¢ Brincadeira: {profile.get('playfulness', 0)}%
‚Ä¢ Domin√¢ncia: {profile.get('dominance', 0)}%
‚Ä¢ Intimidade: {profile.get('intimacy_level', 0)}%
‚Ä¢ Criatividade: {profile.get('creativity', 0)}%
‚Ä¢ Responsividade: {profile.get('responsiveness', 0)}%

üå°Ô∏è **Humor Atual**: {profile.get('current_mood', 'Neutro')}

O que deseja fazer?
"""
    
    await update.message.reply_text(
        text, reply_markup=reply_markup, parse_mode='Markdown'
    )
    return ADULT_ADVANCED_CONFIG

async def handle_personality_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar sele√ß√£o de personalidade"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    callback_data = query.data
    
    if callback_data.startswith("select_personality_"):
        personality_id = callback_data.replace("select_personality_", "")
        
        # Salvar personalidade selecionada no contexto
        context.user_data['selected_personality'] = personality_id
        
        # Mostrar configura√ß√µes detalhadas
        return await show_detailed_config(update, context, personality_id)
        
    elif callback_data == "cancel_adult_config":
        await query.edit_message_text("‚ùå Configura√ß√£o cancelada.")
        return ConversationHandler.END

async def show_detailed_config(update: Update, context: ContextTypes.DEFAULT_TYPE, personality_id):
    """Mostrar configura√ß√µes detalhadas para personalidade"""
    query = update.callback_query
    
    personalities = adult_system.get_personality_types()
    personality_data = personalities.get(personality_id, {})
    
    emoji = personality_data.get('emoji', 'üé≠')
    name = personality_data.get('name', personality_id.title())
    description = personality_data.get('description', 'Personalidade √∫nica')
    
    # Valores padr√£o da personalidade
    defaults = personality_data.get('defaults', {})
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ Usar Configura√ß√£o Padr√£o", callback_data=f"use_default_{personality_id}")],
        [InlineKeyboardButton("‚öôÔ∏è Personalizar Valores", callback_data=f"customize_{personality_id}")],
        [InlineKeyboardButton("üîô Voltar", callback_data="back_to_personality_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
{emoji} **{name.upper()}**

üìù **Descri√ß√£o**: {description}

‚öôÔ∏è **Configura√ß√µes Padr√£o**:
‚Ä¢ Confian√ßa: {defaults.get('confidence_level', 75)}%
‚Ä¢ Brincadeira: {defaults.get('playfulness', 70)}%
‚Ä¢ Domin√¢ncia: {defaults.get('dominance', 50)}%
‚Ä¢ Intimidade: {defaults.get('intimacy_level', 60)}%
‚Ä¢ Criatividade: {defaults.get('creativity', 80)}%
‚Ä¢ Responsividade: {defaults.get('responsiveness', 85)}%

**Escolha uma op√ß√£o**:
"""
    
    await query.edit_message_text(
        text, reply_markup=reply_markup, parse_mode='Markdown'
    )
    return ADULT_PREFERENCES_SETUP

async def handle_config_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar escolha de configura√ß√£o"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    callback_data = query.data
    
    if callback_data.startswith("use_default_"):
        personality_id = callback_data.replace("use_default_", "")
        
        # Criar perfil com valores padr√£o
        personalities = adult_system.get_personality_types()
        personality_data = personalities.get(personality_id, {})
        defaults = personality_data.get('defaults', {})
        
        profile_data = {
            'personality_type': personality_id,
            **defaults
        }
        
        try:
            adult_system.create_adult_profile(user_id, profile_data)
            
            emoji = personality_data.get('emoji', 'üé≠')
            name = personality_data.get('name', personality_id.title())
            
            await query.edit_message_text(
                f"‚úÖ **PERFIL CRIADO COM SUCESSO!**\n\n"
                f"üé≠ **Personalidade**: {emoji} {name}\n"
                f"üìä **Configura√ß√£o**: Padr√£o\n\n"
                f"Agora suas conversas adultas ter√£o essa personalidade!\n\n"
                f"Use /adult_config para ajustar ou /adult_status para ver detalhes.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Erro ao criar perfil: {e}")
            await query.edit_message_text("‚ùå Erro ao criar perfil. Tente novamente.")
            return ConversationHandler.END
            
    elif callback_data.startswith("customize_"):
        await query.edit_message_text(
            "‚öôÔ∏è **Customiza√ß√£o Avan√ßada**\n\n"
            "üöß Esta fun√ß√£o ser√° implementada em breve!\n"
            "Por enquanto, use a configura√ß√£o padr√£o.\n\n"
            "Use /adult_config para tentar novamente.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
        
    elif callback_data == "back_to_personality_selection":
        return await show_personality_selection_menu(update, context)

async def adult_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /adult_status - Mostrar status atual"""
    user_id = str(update.effective_user.id)
    
    try:
        from core.check import check_age
        adult_status = check_age(user_id)
        
        if not adult_status.get('adult_mode_active'):
            await update.message.reply_text(
                "‚ùå **Modo adulto n√£o est√° ativo**\n\n"
                "Use /adult_mode para ativar.",
                parse_mode='Markdown'
            )
            return
    except:
        await update.message.reply_text(
            "‚ùå Erro ao verificar status.",
            parse_mode='Markdown'
        )
        return
    
    # Buscar perfil avan√ßado
    profile = adult_system.get_adult_profile(user_id)
    
    if profile:
        personality_type = profile.get('personality_type', 'N√£o definido')
        personalities = adult_system.get_personality_types()
        personality_info = personalities.get(personality_type, {})
        
        emoji = personality_info.get('emoji', 'üé≠')
        name = personality_info.get('name', personality_type.title())
        
        # Buscar estat√≠sticas
        sessions = adult_system.get_user_session_history(user_id)
        total_sessions = len(sessions) if sessions else 0
        
        text = f"""
üéØ **STATUS DO MODO ADULTO**

‚úÖ **Status**: Ativo com perfil avan√ßado
üé≠ **Personalidade**: {emoji} {name}

üìä **Configura√ß√µes Atuais**:
‚Ä¢ Confian√ßa: {profile.get('confidence_level', 0)}%
‚Ä¢ Brincadeira: {profile.get('playfulness', 0)}%
‚Ä¢ Domin√¢ncia: {profile.get('dominance', 0)}%
‚Ä¢ Intimidade: {profile.get('intimacy_level', 0)}%
‚Ä¢ Criatividade: {profile.get('creativity', 0)}%
‚Ä¢ Responsividade: {profile.get('responsiveness', 0)}%

üå°Ô∏è **Humor Atual**: {profile.get('current_mood', 'Neutro')}
üìà **Sess√µes Realizadas**: {total_sessions}

üîß Use /adult_config para modificar
"""
    else:
        text = """
üéØ **STATUS DO MODO ADULTO**

‚úÖ **Status**: Ativo (configura√ß√£o b√°sica)
‚ùì **Perfil Avan√ßado**: N√£o configurado

üé≠ Para uma experi√™ncia personalizada:
‚Ä¢ Use /adult_config para criar perfil avan√ßado
‚Ä¢ Escolha entre 6 personalidades diferentes
‚Ä¢ Configure par√¢metros detalhados
‚Ä¢ Sistema de humores e feedback

üöÄ **Upgrade para o sistema avan√ßado agora!**
"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def adult_mood_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /adult_mood - Definir humor"""
    user_id = str(update.effective_user.id)
    
    # Verificar se tem perfil avan√ßado
    profile = adult_system.get_adult_profile(user_id)
    
    if not profile:
        await update.message.reply_text(
            "‚ùå **Perfil avan√ßado n√£o encontrado**\n\n"
            "Use /adult_config para criar primeiro.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # Mostrar op√ß√µes de humor
    moods = ['apaixonada', 'travessa', 'dominante', 'carinhosa', 'misteriosa', 'brincalhona', 'sensual', 'rom√¢ntica']
    
    keyboard = []
    mood_emojis = {
        'apaixonada': 'üíï',
        'travessa': 'üòà', 
        'dominante': 'üî•',
        'carinhosa': 'üòä',
        'misteriosa': 'üåô',
        'brincalhona': 'üòú',
        'sensual': 'üíã',
        'rom√¢ntica': 'üåπ'
    }
    
    for mood in moods:
        emoji = mood_emojis.get(mood, 'üå°Ô∏è')
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {mood.title()}", 
            callback_data=f"set_mood_{mood}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_mood")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_mood = profile.get('current_mood', 'Neutro')
    
    await update.message.reply_text(
        f"üå°Ô∏è **DEFINIR HUMOR**\n\n"
        f"**Humor atual**: {current_mood}\n\n"
        f"Escolha o novo humor para suas conversas:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ADULT_MOOD_SELECTION

async def handle_mood_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar sele√ß√£o de humor"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    callback_data = query.data
    
    if callback_data.startswith("set_mood_"):
        mood = callback_data.replace("set_mood_", "")
        
        try:
            # Atualizar humor no perfil
            adult_system.update_user_mood(user_id, mood)
            
            mood_emojis = {
                'apaixonada': 'üíï',
                'travessa': 'üòà', 
                'dominante': 'üî•',
                'carinhosa': 'üòä',
                'misteriosa': 'üåô',
                'brincalhona': 'üòú',
                'sensual': 'üíã',
                'rom√¢ntica': 'üåπ'
            }
            
            emoji = mood_emojis.get(mood, 'üå°Ô∏è')
            
            await query.edit_message_text(
                f"‚úÖ **HUMOR DEFINIDO!**\n\n"
                f"üå°Ô∏è **Novo humor**: {emoji} {mood.title()}\n\n"
                f"Suas pr√≥ximas conversas adultas ter√£o essa energia!",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Erro ao definir humor: {e}")
            await query.edit_message_text(
                "‚ùå Erro ao definir humor. Tente novamente.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
    elif callback_data == "cancel_mood":
        await query.edit_message_text("‚ùå Defini√ß√£o de humor cancelada.")
        return ConversationHandler.END

# Handlers de conversa√ß√£o
adult_config_conversation = ConversationHandler(
    entry_points=[CommandHandler('adult_config', adult_config_command)],
    states={
        ADULT_PERSONALITY_SELECT: [CallbackQueryHandler(handle_personality_selection)],
        ADULT_PREFERENCES_SETUP: [CallbackQueryHandler(handle_config_choice)],
        ADULT_ADVANCED_CONFIG: [CallbackQueryHandler(handle_personality_selection)],
    },
    fallbacks=[CallbackQueryHandler(handle_personality_selection, pattern="cancel_adult_config")]
)

adult_mood_conversation = ConversationHandler(
    entry_points=[CommandHandler('adult_mood', adult_mood_command)],
    states={
        ADULT_MOOD_SELECTION: [CallbackQueryHandler(handle_mood_selection)],
    },
    fallbacks=[CallbackQueryHandler(handle_mood_selection, pattern="cancel_mood")]
)

# Comandos individuais
adult_status_handler = CommandHandler('adult_status', adult_status_command)

# Lista de handlers para registrar
advanced_adult_handlers = [
    adult_config_conversation,
    adult_mood_conversation, 
    adult_status_handler
]

# Adicionar comandos de descoberta
try:
    from .adult_discovery_commands import discovery_commands
    advanced_adult_handlers.extend(discovery_commands)
except ImportError:
    pass