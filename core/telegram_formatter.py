"""
Sistema de formata√ß√£o rica para Telegram
Melhora a apresenta√ß√£o das mensagens usando recursos avan√ßados do Telegram
"""

from telegram.constants import ParseMode
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import html
import re

class TelegramFormatter:
    """Classe para formata√ß√£o avan√ßada de mensagens no Telegram"""
    
    @staticmethod
    def format_message(text, style='markdown'):
        """
        Formata texto para apresenta√ß√£o rica no Telegram
        
        Args:
            text: Texto a ser formatado
            style: Estilo de formata√ß√£o ('markdown', 'html')
        """
        if style == 'html':
            # Formata√ß√£o HTML
            text = text.replace('**', '<b>').replace('**', '</b>')
            text = text.replace('*', '<i>').replace('*', '</i>')
            text = text.replace('`', '<code>').replace('`', '</code>')
            text = text.replace('```', '<pre>').replace('```', '</pre>')
            return text
        else:
            # Formata√ß√£o Markdown (padr√£o)
            return text
    
    @staticmethod
    def create_status_message(bot_name, user_name, personality, language):
        """Cria mensagem de status formatada"""
        
        status_message = f"""
ü§ñ *Status do Sistema*

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üë§ *Usu√°rio:* `{user_name}`
‚îÇ üé≠ *Assistente:* `{bot_name}`
‚îÇ üé® *Personalidade:* `{personality}`
‚îÇ üó£Ô∏è *Linguagem:* `{language}`
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚úÖ Sistema operacional e personalizado!
        """
        return status_message.strip()
    
    @staticmethod
    def create_personalization_summary(profile):
        """Cria resumo da personaliza√ß√£o em formato visual"""
        
        summary = f"""
üé® *Resumo da Personaliza√ß√£o*

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üìã *PERFIL CONFIGURADO*   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üë§ Nome: `{profile.get('user_name', 'N/A')}`
‚ïë ü§ñ Assistente: `{profile.get('bot_name', 'N/A')}`
‚ïë ‚ößÔ∏è G√™nero: `{profile.get('bot_gender', 'N/A')}`
‚ïë üé≠ Personalidade: `{profile.get('bot_personality', 'N/A')}`
‚ïë üó£Ô∏è Linguagem: `{profile.get('bot_language', 'N/A')}`
‚ïë üéØ T√≥picos: `{profile.get('preferred_topics', 'N/A')}`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ú® Tudo configurado! Vamos conversar?
        """
        return summary.strip()
    
    @staticmethod
    def create_welcome_card(user_name=None):
        """Cria cart√£o de boas-vindas estilizado"""
        
        name_part = f" {user_name}" if user_name else ""
        
        welcome = f"""
üöÄ *Bem-vindo ao Eron.IA{name_part}!*

‚îå‚îÄ ‚≠ê RECURSOS DISPON√çVEIS ‚îÄ‚îê
‚îÇ                           ‚îÇ
‚îÇ üé® Personaliza√ß√£o total   ‚îÇ
‚îÇ üí¨ Conversas inteligentes ‚îÇ
‚îÇ üòä Sistema de emo√ß√µes     ‚îÇ
‚îÇ ‚öôÔ∏è Prefer√™ncias detalhadas‚îÇ
‚îÇ üîÑ Reset quando precisar  ‚îÇ
‚îÇ                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Digite qualquer coisa para come√ßar!
        """
        return welcome.strip()
    
    @staticmethod
    def create_help_menu():
        """Cria menu de ajuda formatado"""
        
        help_text = f"""
üìö *Central de Ajuda - Eron.IA*

‚îå‚îÄ üéÆ COMANDOS PRINCIPAIS ‚îÄ‚îê
‚îÇ /start - Iniciar sistema  ‚îÇ
‚îÇ /personalize - Configurar ‚îÇ
‚îÇ /clear - Resetar tudo     ‚îÇ
‚îÇ /preferences - Prefer√™ncias‚îÇ
‚îÇ /emotions - Ver emo√ß√µes   ‚îÇ
‚îÇ /status - Status atual    ‚îÇ
‚îÇ /help - Esta mensagem     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ üí° DICAS √öTEIS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚Ä¢ Digite normalmente      ‚îÇ
‚îÇ ‚Ä¢ Mude prefer√™ncias sempre‚îÇ
‚îÇ ‚Ä¢ Use /clear para resetar ‚îÇ
‚îÇ ‚Ä¢ Personalize √† vontade   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚ùì *D√∫vidas?* Apenas pergunte!
        """
        return help_text.strip()
    
    @staticmethod
    def create_preferences_menu(preferences=None):
        """Cria menu de prefer√™ncias visual"""
        
        if not preferences:
            preferences = {
                'message_style': 'casual',
                'response_length': 'medium', 
                'include_emojis': True
            }
            
        style_emoji = {'casual': 'üòä', 'formal': 'üé©', 'friendly': 'ü§ó'}.get(preferences.get('message_style'), 'üòä')
        length_emoji = {'short': 'üìè', 'medium': 'üìê', 'long': 'üìä'}.get(preferences.get('response_length'), 'üìê')
        emoji_status = '‚úÖ' if preferences.get('include_emojis') else '‚ùå'
        
        prefs_menu = f"""
‚öôÔ∏è *Prefer√™ncias Atuais*

‚îå‚îÄ üé® ESTILO DE CONVERSA ‚îÄ‚îê
‚îÇ {style_emoji} Estilo: `{preferences.get('message_style', 'casual')}`
‚îÇ {length_emoji} Tamanho: `{preferences.get('response_length', 'medium')}`
‚îÇ {emoji_status} Emojis: `{'Sim' if preferences.get('include_emojis') else 'N√£o'}`
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Para alterar, use os bot√µes abaixo:
        """
        return prefs_menu.strip()
    
    @staticmethod
    def create_emotion_display(user_emotion=None, bot_emotion=None):
        """Cria display visual de emo√ß√µes"""
        
        user_emoji = {
            'feliz': 'üòä', 'triste': 'üò¢', 'raiva': 'üò†',
            'surpresa': 'üòÆ', 'medo': 'üò®', 'neutro': 'üòê'
        }.get(user_emotion, 'üòê')
        
        bot_emoji = {
            'emp√°tico': 'ü§ó', 'entusiasmado': 'ü§©', 'calmo': 'üòå',
            'curioso': 'ü§î', 'prestativo': 'üòä', 'neutro': 'ü§ñ'
        }.get(bot_emotion, 'ü§ñ')
        
        emotion_display = f"""
üí≠ *Estado Emocional*

‚îå‚îÄ üë§ USU√ÅRIO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {user_emoji} Emo√ß√£o: `{user_emotion or 'neutro'}`
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ ü§ñ ASSISTENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {bot_emoji} Estado: `{bot_emotion or 'neutro'}`
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üé≠ As emo√ß√µes influenciam minhas respostas!
        """
        return emotion_display.strip()
    
    @staticmethod
    def create_keyboard_menu(buttons_config):
        """
        Cria teclado inline personalizado
        
        Args:
            buttons_config: Lista de bot√µes no formato:
            [
                [{'text': 'Bot√£o 1', 'callback': 'callback_1'}],
                [{'text': 'Bot√£o 2', 'callback': 'callback_2'}]
            ]
        """
        keyboard = []
        
        for row in buttons_config:
            button_row = []
            for button in row:
                button_row.append(
                    InlineKeyboardButton(
                        text=button['text'],
                        callback_data=button['callback']
                    )
                )
            keyboard.append(button_row)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_progress_bar(current, total, width=20):
        """Cria barra de progresso visual"""
        
        progress = int((current / total) * width)
        bar = '‚ñà' * progress + '‚ñë' * (width - progress)
        percentage = int((current / total) * 100)
        
        return f"`{bar}` {percentage}% ({current}/{total})"
    
    @staticmethod
    def escape_markdown(text):
        """Escapa caracteres especiais do Markdown"""
        
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    @staticmethod
    def wrap_code_block(code, language=''):
        """Envolve c√≥digo em bloco formatado"""
        
        return f"```{language}\n{code}\n```"
    
    @staticmethod
    def create_divider(char='‚îÄ', length=25):
        """Cria divisor visual"""
        
        return char * length

# Atalhos para uso comum
def format_bold(text):
    """Texto em negrito"""
    return f"*{text}*"

def format_italic(text):
    """Texto em it√°lico"""
    return f"_{text}_"

def format_code(text):
    """Texto como c√≥digo"""
    return f"`{text}`"

def format_link(text, url):
    """Cria link formatado"""
    return f"[{text}]({url})"
