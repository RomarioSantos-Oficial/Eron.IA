"""
Sistema de Modera√ß√£o Seletiva - Eron.IA
=======================================

Configura√ß√£o espec√≠fica que permite que apenas a personaliza√ß√£o
n√£o tenha modera√ß√£o, enquanto outras funcionalidades mant√™m as restri√ß√µes.

Funcionalidades:
- Personaliza√ß√£o: SEM modera√ß√£o (adultos podem conversar livremente)
- Chat geral: COM modera√ß√£o
- Outros recursos: COM modera√ß√£o

Autor: Eron.IA System
"""

from enum import Enum
from typing import Dict, Any, Optional
import os

class ModerationContext(Enum):
    """Contextos onde a modera√ß√£o pode ser aplicada"""
    PERSONALIZATION = "personalization"    # Sem modera√ß√£o para personaliza√ß√£o
    GENERAL_CHAT = "general_chat"         # Com modera√ß√£o
    PUBLIC_CHAT = "public_chat"           # Com modera√ß√£o
    TELEGRAM_BOT = "telegram_bot"         # Com modera√ß√£o
    WEB_INTERFACE = "web_interface"       # Com modera√ß√£o

class SelectiveModerationConfig:
    """Configura√ß√£o seletiva de modera√ß√£o por contexto"""
    
    def __init__(self):
        self.moderation_settings = self._get_default_settings()
    
    def _get_default_settings(self) -> Dict[ModerationContext, Dict[str, Any]]:
        """Define configura√ß√µes padr√£o por contexto"""
        
        return {
            # PERSONALIZA√á√ÉO: Sem modera√ß√£o para adultos
            ModerationContext.PERSONALIZATION: {
                'enabled': False,
                'description': 'üí¨ Personaliza√ß√£o livre para adultos',
                'adult_content_allowed': True,
                'sexual_content_allowed': True,
                'explicit_language_allowed': True,
                'drug_references_allowed': True,
                'only_check_spam': False,
                'require_adult_verification': True,
                'reasons': [
                    'Permite conversas adultas na personaliza√ß√£o',
                    'Usu√°rios podem definir prefer√™ncias expl√≠citas',
                    'Personaliza√ß√£o de personalidade sem limita√ß√µes'
                ]
            },
            
            # CHAT GERAL: Com modera√ß√£o normal
            ModerationContext.GENERAL_CHAT: {
                'enabled': True,
                'description': 'üõ°Ô∏è Chat geral com modera√ß√£o',
                'adult_content_allowed': False,
                'sexual_content_allowed': False,
                'explicit_language_allowed': False,
                'drug_references_allowed': False,
                'only_check_spam': False,
                'require_adult_verification': False,
                'auto_filter': True,
                'warn_inappropriate': True
            },
            
            # CHAT P√öBLICO: Modera√ß√£o mais rigorosa
            ModerationContext.PUBLIC_CHAT: {
                'enabled': True,
                'description': 'üîí Chat p√∫blico com modera√ß√£o rigorosa',
                'adult_content_allowed': False,
                'sexual_content_allowed': False,
                'explicit_language_allowed': False,
                'drug_references_allowed': False,
                'only_check_spam': False,
                'require_adult_verification': False,
                'auto_filter': True,
                'strict_mode': True
            },
            
            # TELEGRAM BOT: Modera√ß√£o padr√£o
            ModerationContext.TELEGRAM_BOT: {
                'enabled': True,
                'description': 'ü§ñ Telegram com modera√ß√£o padr√£o',
                'adult_content_allowed': False,
                'sexual_content_allowed': False,
                'explicit_language_allowed': False,
                'drug_references_allowed': False,
                'only_check_spam': False,
                'require_adult_verification': False,
                'auto_filter': True
            },
            
            # WEB INTERFACE: Modera√ß√£o padr√£o
            ModerationContext.WEB_INTERFACE: {
                'enabled': True,
                'description': 'üåê Web interface com modera√ß√£o',
                'adult_content_allowed': False,
                'sexual_content_allowed': False,
                'explicit_language_allowed': False,
                'drug_references_allowed': False,
                'only_check_spam': False,
                'require_adult_verification': False,
                'auto_filter': True
            }
        }
    
    def get_context_config(self, context: ModerationContext) -> Dict[str, Any]:
        """Obt√©m configura√ß√£o para um contexto espec√≠fico"""
        return self.moderation_settings.get(context, self.moderation_settings[ModerationContext.GENERAL_CHAT])
    
    def should_moderate(self, context: ModerationContext, user_is_adult: bool = False) -> bool:
        """Determina se deve moderar baseado no contexto"""
        config = self.get_context_config(context)
        
        # Se for personaliza√ß√£o e usu√°rio for adulto, n√£o moderar
        if context == ModerationContext.PERSONALIZATION and user_is_adult:
            return False
        
        return config.get('enabled', True)
    
    def is_content_allowed(self, context: ModerationContext, content_type: str, user_is_adult: bool = False) -> bool:
        """Verifica se um tipo de conte√∫do √© permitido no contexto"""
        config = self.get_context_config(context)
        
        # Mapeamento de tipos de conte√∫do
        content_mapping = {
            'adult': 'adult_content_allowed',
            'sexual': 'sexual_content_allowed',
            'explicit': 'explicit_language_allowed',
            'drugs': 'drug_references_allowed'
        }
        
        config_key = content_mapping.get(content_type)
        if not config_key:
            return True  # Se n√£o reconhecer o tipo, permitir
        
        # Para personaliza√ß√£o de adultos, sempre permitir
        if context == ModerationContext.PERSONALIZATION and user_is_adult:
            return True
        
        return config.get(config_key, False)
    
    def get_moderation_message(self, context: ModerationContext) -> str:
        """Retorna mensagem de modera√ß√£o para o contexto"""
        config = self.get_context_config(context)
        
        if context == ModerationContext.PERSONALIZATION:
            return """
üé≠ **PERSONALIZA√á√ÉO LIVRE**

Para usu√°rios adultos verificados, a personaliza√ß√£o permite:
‚Ä¢ Conversas expl√≠citas sobre prefer√™ncias
‚Ä¢ Defini√ß√£o de personalidade adulta
‚Ä¢ Configura√ß√£o de linguagem sem restri√ß√µes
‚Ä¢ Temas adultos na personaliza√ß√£o do bot

‚ö†Ô∏è **Nota:** Apenas aplic√°vel na configura√ß√£o da personaliza√ß√£o.
Outros chats mant√™m modera√ß√£o normal.
"""
        else:
            return f"üõ°Ô∏è **MODERA√á√ÉO ATIVA** - {config['description']}"
    
    def get_status_summary(self) -> str:
        """Retorna resumo do status de modera√ß√£o"""
        status = "üéØ **CONFIGURA√á√ÉO DE MODERA√á√ÉO SELETIVA**\n\n"
        
        for context, config in self.moderation_settings.items():
            emoji = "‚ùå" if not config['enabled'] else "‚úÖ"
            status += f"{emoji} **{context.value.title()}:** {config['description']}\n"
        
        status += "\nüí° **Resumo:**\n"
        status += "‚Ä¢ Personaliza√ß√£o: Livre para adultos\n"
        status += "‚Ä¢ Demais contextos: Modera√ß√£o ativa\n"
        
        return status


class PersonalizationModerator:
    """Moderador espec√≠fico para personaliza√ß√£o"""
    
    def __init__(self):
        self.config = SelectiveModerationConfig()
    
    def should_allow_personalization_content(self, user_id: str, content: str, user_is_adult: bool = False) -> Dict[str, Any]:
        """Verifica se deve permitir conte√∫do na personaliza√ß√£o"""
        
        # Se usu√°rio √© adulto, permitir tudo na personaliza√ß√£o
        if user_is_adult:
            return {
                'allowed': True,
                'reason': 'Usu√°rio adulto - personaliza√ß√£o livre',
                'action': 'allow',
                'context': 'personalization',
                'moderation_disabled': True
            }
        
        # Para menores, aplicar modera√ß√£o leve (apenas verificar spam/ass√©dio)
        if self._is_spam_or_harassment(content):
            return {
                'allowed': False,
                'reason': 'Poss√≠vel spam ou ass√©dio detectado',
                'action': 'filter',
                'context': 'personalization',
                'moderation_disabled': False
            }
        
        return {
            'allowed': True,
            'reason': 'Conte√∫do de personaliza√ß√£o permitido',
            'action': 'allow',
            'context': 'personalization',
            'moderation_disabled': False
        }
    
    def _is_spam_or_harassment(self, content: str) -> bool:
        """Verifica√ß√£o b√°sica de spam/ass√©dio"""
        content_lower = content.lower()
        
        spam_indicators = ['compre agora', 'clique aqui', 'promo√ß√£o √∫nica']
        harassment_indicators = ['amea√ßa', 'vou te matar', 'odeio voc√™']
        
        for indicator in spam_indicators + harassment_indicators:
            if indicator in content_lower:
                return True
        
        # Verificar repeti√ß√£o excessiva
        words = content_lower.split()
        if len(words) > 10 and len(set(words)) < len(words) * 0.5:
            return True
        
        return False


# Inst√¢ncia global
selective_config = SelectiveModerationConfig()
personalization_moderator = PersonalizationModerator()


def get_selective_config() -> SelectiveModerationConfig:
    """Retorna configura√ß√£o seletiva global"""
    return selective_config


def check_personalization_moderation(user_id: str, content: str, user_is_adult: bool = False) -> Dict[str, Any]:
    """Fun√ß√£o helper para verificar modera√ß√£o na personaliza√ß√£o"""
    return personalization_moderator.should_allow_personalization_content(user_id, content, user_is_adult)


def is_moderation_enabled_for_context(context: str, user_is_adult: bool = False) -> bool:
    """Verifica se modera√ß√£o est√° habilitada para um contexto"""
    try:
        context_enum = ModerationContext(context)
        return selective_config.should_moderate(context_enum, user_is_adult)
    except ValueError:
        return True  # Por seguran√ßa, habilitar modera√ß√£o se contexto desconhecido


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "status":
            config = get_selective_config()
            print(config.get_status_summary())
        elif sys.argv[1] == "test":
            # Teste r√°pido
            print("üß™ TESTE DE MODERA√á√ÉO SELETIVA\n")
            
            test_cases = [
                ("Personaliza√ß√£o adulto", "personalization", "Quero conversar sobre sexo", True),
                ("Personaliza√ß√£o menor", "personalization", "Quero conversar sobre sexo", False),
                ("Chat geral", "general_chat", "Quero conversar sobre sexo", True),
                ("Telegram bot", "telegram_bot", "Palavr√£o aqui", False)
            ]
            
            for name, context, content, is_adult in test_cases:
                try:
                    context_enum = ModerationContext(context)
                    should_moderate = selective_config.should_moderate(context_enum, is_adult)
                    emoji = "‚úÖ" if not should_moderate else "üõ°Ô∏è"
                    print(f"{emoji} {name}: {'Permitido' if not should_moderate else 'Moderado'}")
                except ValueError:
                    print(f"‚ùì {name}: Contexto inv√°lido")
    else:
        print("Comandos:")
        print("  python selective_moderation.py status  # Ver configura√ß√µes")
        print("  python selective_moderation.py test    # Teste r√°pido")