"""
Patch para Sistema de Personaliza√ß√£o - Sem Modera√ß√£o para Adultos
==================================================================

Modifica o sistema de personaliza√ß√£o para permitir conte√∫do
adulto quando o usu√°rio for verificado como maior de idade.

Aplica-se apenas ao contexto de personaliza√ß√£o - outros
contextos mant√™m modera√ß√£o normal.

Uso: Importar e usar personalization_is_allowed() antes de salvar dados
"""

import os
import sys
from datetime import datetime

def is_adult_user_simple(user_profile: dict) -> bool:
    """
    Verifica√ß√£o simples se usu√°rio √© adulto baseado no perfil
    
    Args:
        user_profile: Dicion√°rio com dados do perfil do usu√°rio
    
    Returns:
        bool: True se usu√°rio for considerado adulto
    """
    if not user_profile:
        return False
    
    # Verificar campo de idade
    age = user_profile.get('user_age', '')
    
    # Verificar diferentes formatos de idade
    if isinstance(age, int):
        return age >= 18
    
    if isinstance(age, str):
        # Formatos: "18", "18+", "25 anos", etc.
        age_str = age.lower().strip()
        
        # Se tem "18+" ou similar
        if '+' in age_str or 'mais' in age_str:
            return True
        
        # Extrair n√∫mero da idade
        try:
            # Pegar apenas n√∫meros
            age_num = int(''.join(filter(str.isdigit, age_str)))
            return age_num >= 18
        except (ValueError, TypeError):
            pass
    
    # Verificar se tem acesso adulto habilitado
    has_mature_access = user_profile.get('has_mature_access', False)
    adult_mode_enabled = user_profile.get('adult_mode_enabled', False)
    
    return has_mature_access or adult_mode_enabled


def personalization_is_allowed(content: str, user_profile: dict = None, context: str = 'personalization') -> dict:
    """
    Verifica se conte√∫do de personaliza√ß√£o deve ser permitido
    
    Args:
        content: Conte√∫do a ser verificado
        user_profile: Perfil do usu√°rio
        context: Contexto ('personalization' ou outro)
    
    Returns:
        dict: Resultado da verifica√ß√£o
    """
    
    # Se n√£o for personaliza√ß√£o, aplicar modera√ß√£o normal
    if context != 'personalization':
        return {
            'allowed': False,  # Por seguran√ßa, bloquear por padr√£o
            'reason': 'Contexto n√£o √© personaliza√ß√£o - aplicar modera√ß√£o normal',
            'is_adult': False,
            'moderation_bypassed': False,
            'action': 'check_with_normal_moderation'
        }
    
    # Verificar se usu√°rio √© adulto
    is_adult = is_adult_user_simple(user_profile)
    
    # Se usu√°rio √© adulto, permitir praticamente tudo na personaliza√ß√£o
    if is_adult:
        return {
            'allowed': True,
            'reason': 'Usu√°rio adulto - personaliza√ß√£o livre permitida',
            'is_adult': True,
            'moderation_bypassed': True,
            'action': 'allow',
            'note': 'Modera√ß√£o desabilitada para personaliza√ß√£o de adultos'
        }
    
    # Para menores, verificar apenas problemas √≥bvios
    content_lower = content.lower().strip()
    
    # Lista de verifica√ß√µes b√°sicas (apenas problemas graves)
    serious_issues = [
        'spam repetitivo', 'amea√ßa de morte', 'viol√™ncia extrema',
        'ass√©dio', 'bullying', 'conte√∫do ilegal'
    ]
    
    # Verificar se √© spam (conte√∫do repetitivo)
    words = content_lower.split()
    if len(words) > 5:
        unique_words = set(words)
        if len(unique_words) < len(words) * 0.4:  # Menos de 40% palavras √∫nicas
            return {
                'allowed': False,
                'reason': 'Poss√≠vel spam detectado - muita repeti√ß√£o',
                'is_adult': False,
                'moderation_bypassed': False,
                'action': 'filter'
            }
    
    # Para menores, na personaliza√ß√£o, ser bem permissivo
    return {
        'allowed': True,
        'reason': 'Personaliza√ß√£o permitida - modera√ß√£o leve aplicada',
        'is_adult': False,
        'moderation_bypassed': False,
        'action': 'allow',
        'note': 'Modera√ß√£o leve para personaliza√ß√£o de menores'
    }


def get_personalization_status_message(user_profile: dict = None) -> str:
    """
    Retorna mensagem de status da personaliza√ß√£o baseada no usu√°rio
    """
    is_adult = is_adult_user_simple(user_profile)
    
    if is_adult:
        return """
üé≠ **PERSONALIZA√á√ÉO LIVRE - USU√ÅRIO ADULTO**

‚úÖ Voc√™ pode personalizar livremente:
‚Ä¢ Linguagem adulta e expl√≠cita
‚Ä¢ Temas sexuais e rom√¢nticos  
‚Ä¢ Personalidade provocativa
‚Ä¢ Refer√™ncias adultas
‚Ä¢ Conversas expl√≠citas sobre prefer√™ncias

‚ö†Ô∏è **Importante:** Esta liberdade se aplica APENAS √† configura√ß√£o 
da personaliza√ß√£o. Conversas normais seguem regras de modera√ß√£o.

üí° **Contextos com modera√ß√£o normal:**
‚Ä¢ Chat geral do Telegram
‚Ä¢ Mensagens p√∫blicas
‚Ä¢ Intera√ß√µes web normais
"""
    else:
        return """
üé® **PERSONALIZA√á√ÉO AMIG√ÅVEL**

Voc√™ pode personalizar:
‚Ä¢ Nome e personalidade do bot
‚Ä¢ Estilo de conversa respeitoso
‚Ä¢ Interesses e hobbies
‚Ä¢ Temas apropriados
‚Ä¢ Linguagem educada

üí° Para acessar personaliza√ß√£o avan√ßada, confirme sua idade nas configura√ß√µes.
"""


def apply_personalization_filter(content: str, user_profile: dict = None) -> dict:
    """
    Aplica filtro espec√≠fico para personaliza√ß√£o
    
    Esta √© a fun√ß√£o principal que deve ser usada nas rotas de personaliza√ß√£o
    """
    result = personalization_is_allowed(content, user_profile, 'personalization')
    
    # Log da decis√£o
    timestamp = datetime.now().isoformat()
    user_age = user_profile.get('user_age', 'n√£o informado') if user_profile else 'n√£o informado'
    
    log_entry = f"""[{timestamp}] PERSONALIZA√á√ÉO FILTER:
  Usu√°rio: {user_profile.get('user_name', 'An√¥nimo') if user_profile else 'An√¥nimo'}
  Idade: {user_age}
  √â adulto: {result['is_adult']}
  Conte√∫do permitido: {result['allowed']}
  Raz√£o: {result['reason']}
  Modera√ß√£o ignorada: {result['moderation_bypassed']}
"""
    
    print(log_entry)  # Para debug - pode ser removido em produ√ß√£o
    
    return result


# Fun√ß√£o de teste
def test_personalization_filter():
    """Testa o sistema de filtro de personaliza√ß√£o"""
    
    print("üß™ TESTE DO FILTRO DE PERSONALIZA√á√ÉO\n")
    
    # Perfis de teste
    adult_profile = {
        'user_name': 'Jo√£o',
        'user_age': '25',
        'has_mature_access': True
    }
    
    minor_profile = {
        'user_name': 'Ana',
        'user_age': '16',
        'has_mature_access': False
    }
    
    adult_profile_plus = {
        'user_name': 'Maria',
        'user_age': '18+',
        'has_mature_access': False
    }
    
    # Conte√∫dos de teste
    test_contents = [
        "Quero que voc√™ seja sexy e provocante",
        "Configure personalidade sexual explicita",
        "Fale palavr√µes e seja safada",
        "Seja minha namorada virtual",
        "Configure nome como Ana",
        "spam spam spam spam spam spam spam"
    ]
    
    profiles = [
        ("üë® ADULTO (25 anos)", adult_profile),
        ("üë© ADULTO (18+)", adult_profile_plus), 
        ("üëß MENOR (16 anos)", minor_profile)
    ]
    
    for profile_name, profile in profiles:
        print(f"\n{profile_name}:")
        print(get_personalization_status_message(profile))
        
        for content in test_contents[:3]:  # Teste apenas alguns
            result = apply_personalization_filter(content, profile)
            emoji = "‚úÖ" if result['allowed'] else "‚ùå"
            print(f"  {emoji} \"{content[:40]}...\"")
            print(f"      ‚Üí {result['action']} ({result['reason']})")


if __name__ == "__main__":
    test_personalization_filter()