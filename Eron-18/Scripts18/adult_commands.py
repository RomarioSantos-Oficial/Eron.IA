"""
Sistema de Comandos Adultos - CONTE√öDO +18
Gerencia ativa√ß√£o, verifica√ß√£o de idade e termos de responsabilidade
"""

from datetime import datetime, timedelta
import hashlib
import secrets
import json

class AdultCommandSystem:
    """
    Sistema de comandos para ativa√ß√£o do modo adulto com verifica√ß√£o de idade.
    RESTRITO PARA MAIORES DE 18 ANOS.
    """
    
    def __init__(self, adult_db):
        self.db = adult_db
        
        # Termos de responsabilidade
        self.terms_of_responsibility = """
üîû TERMOS DE RESPONSABILIDADE - CONTE√öDO ADULTO (+18)

‚ö†Ô∏è ATEN√á√ÉO: Este modo cont√©m conte√∫do adulto expl√≠cito destinado EXCLUSIVAMENTE para maiores de 18 anos.

üìã AO CONTINUAR, VOC√ä DECLARA E GARANTE QUE:
‚Ä¢ Possui 18 anos completos ou mais
‚Ä¢ √â legalmente capaz de acessar conte√∫do adulto em sua jurisdi√ß√£o
‚Ä¢ Est√° acessando este conte√∫do por livre e espont√¢nea vontade
‚Ä¢ Compreende que o conte√∫do pode incluir linguagem expl√≠cita e simula√ß√£o de relacionamento √≠ntimo

üõ°Ô∏è RESPONSABILIDADES:
‚Ä¢ O usu√°rio √© √öNICO respons√°vel pelo uso deste modo
‚Ä¢ Este sistema √© uma simula√ß√£o de IA e n√£o substitui relacionamentos reais
‚Ä¢ Mantenha seus dados pessoais seguros
‚Ä¢ Use com responsabilidade e respeito

‚öñÔ∏è PROTE√á√ïES LEGAIS:
‚Ä¢ Este sistema registra verifica√ß√µes de idade para prote√ß√£o legal
‚Ä¢ Dados s√£o criptografados e protegidos
‚Ä¢ Voc√™ pode revogar acesso a qualquer momento

üö® Se voc√™ N√ÉO tem 18 anos completos, PARE AGORA e n√£o prossiga.

Digite 'ACEITO18' para confirmar que voc√™ tem 18+ anos e aceita estes termos.
Digite 'CANCELAR' para cancelar a ativa√ß√£o.
        """
        
        # Perguntas de verifica√ß√£o de idade (aleat√≥rias)
        self.age_verification_questions = [
            {
                "question": "Em que ano voc√™ nasceu? (Digite apenas o ano, ex: 1990)",
                "type": "birth_year",
                "min_age": 18
            },
            {
                "question": "Quantos anos voc√™ tem? (Digite apenas o n√∫mero)",
                "type": "current_age",
                "min_value": 18
            }
        ]

    def handle_adult_activation_command(self, user_id, platform='telegram'):
        """Inicia processo de ativa√ß√£o do modo adulto"""
        
        # Verificar se j√° tem acesso ativo
        if self.has_active_adult_access(user_id):
            return {
                'status': 'already_active',
                'message': 'üîû Modo adulto j√° est√° ativo para voc√™!\n\nPara ajustar configura√ß√µes, use /devassa_config'
            }
        
        # Verificar se j√° passou pela verifica√ß√£o recentemente
        recent_verification = self.db.get_recent_verification(user_id, hours=24)
        if recent_verification and not recent_verification['verified']:
            return {
                'status': 'recent_attempt',
                'message': '‚ö†Ô∏è Voc√™ tentou verifica√ß√£o recentemente mas n√£o completou ou n√£o atende aos requisitos.\n\nTente novamente em 24 horas ou entre em contato se h√° algum erro.'
            }
        
        # Iniciar processo de verifica√ß√£o
        verification_token = self.generate_verification_token(user_id)
        
        # Registrar tentativa de verifica√ß√£o
        self.db.log_verification_attempt(user_id, verification_token, platform)
        
        return {
            'status': 'terms_required',
            'message': self.terms_of_responsibility,
            'token': verification_token
        }

    def handle_terms_response(self, user_id, response, verification_token):
        """Processa resposta aos termos de responsabilidade"""
        
        # Verificar token v√°lido
        if not self.db.validate_verification_token(user_id, verification_token):
            return {
                'status': 'invalid_token',
                'message': '‚ùå Sess√£o de verifica√ß√£o inv√°lida ou expirada. Tente novamente com /18'
            }
        
        if response.upper() == 'ACEITO18':
            # Prosseguir para verifica√ß√£o de idade
            question = self.get_age_verification_question()
            
            # Atualizar estado da verifica√ß√£o
            self.db.update_verification_stage(user_id, verification_token, 'age_verification')
            
            return {
                'status': 'age_verification',
                'message': f"‚úÖ Termos aceitos!\n\nüîç VERIFICA√á√ÉO DE IDADE:\n{question['question']}",
                'question_type': question['type'],
                'token': verification_token
            }
            
        elif response.upper() == 'CANCELAR':
            # Cancelar verifica√ß√£o
            self.db.cancel_verification(user_id, verification_token, 'user_cancelled')
            
            return {
                'status': 'cancelled',
                'message': '‚úÖ Ativa√ß√£o cancelada com sucesso.\n\nVoc√™ pode tentar novamente a qualquer momento com /18'
            }
        else:
            return {
                'status': 'invalid_response',
                'message': '‚ùå Resposta inv√°lida!\n\nDigite exatamente:\n‚Ä¢ "ACEITO18" para aceitar os termos\n‚Ä¢ "CANCELAR" para cancelar'
            }

    def handle_age_verification(self, user_id, age_response, verification_token, question_type):
        """Processa resposta da verifica√ß√£o de idade"""
        
        # Verificar token v√°lido
        if not self.db.validate_verification_token(user_id, verification_token):
            return {
                'status': 'invalid_token',
                'message': '‚ùå Sess√£o de verifica√ß√£o inv√°lida ou expirada. Tente novamente com /18'
            }
        
        try:
            age_value = int(age_response.strip())
        except ValueError:
            return {
                'status': 'invalid_format',
                'message': '‚ùå Por favor, digite apenas n√∫meros.\n\nExemplo: 25'
            }
        
        is_valid_age = False
        calculated_age = None
        
        if question_type == 'birth_year':
            current_year = datetime.now().year
            calculated_age = current_year - age_value
            is_valid_age = calculated_age >= 18 and age_value <= current_year - 18
            
        elif question_type == 'current_age':
            calculated_age = age_value
            is_valid_age = age_value >= 18
        
        if is_valid_age:
            # Idade v√°lida - conceder acesso
            session_token = self.generate_session_token(user_id)
            
            # Registrar verifica√ß√£o bem-sucedida
            self.db.complete_age_verification(
                user_id, 
                verification_token, 
                calculated_age, 
                True,
                session_token
            )
            
            # Criar sess√£o adulta ativa
            self.db.create_adult_session(user_id, session_token)
            
            return {
                'status': 'access_granted',
                'message': 'üîû‚úÖ ACESSO ADULTO CONCEDIDO!\n\nüéâ Bem-vindo(a) ao modo DEVASSA do Eron.IA!\n\n‚öôÔ∏è Configura√ß√µes dispon√≠veis:\n‚Ä¢ /devassa_config - Ajustar intensidade e prefer√™ncias\n‚Ä¢ /devassa_off - Desativar modo adulto\n\nüî• O Eron agora responder√° com linguagem adulta adaptada ao seu perfil!\n\nüí° Dica: Voc√™ pode ajustar a intensidade (1-Suave, 2-Moderado, 3-Intenso) nas configura√ß√µes.',
                'session_token': session_token
            }
        else:
            # Idade inv√°lida
            self.db.complete_age_verification(
                user_id,
                verification_token, 
                calculated_age,
                False,
                None,
                'underage'
            )
            
            return {
                'status': 'access_denied',
                'message': '‚ùå ACESSO NEGADO\n\nüö´ Este conte√∫do √© restrito para maiores de 18 anos.\n\nSe voc√™ acredita que h√° um erro, tente novamente em 24 horas ou verifique se digitou sua idade corretamente.'
            }

    def has_active_adult_access(self, user_id):
        """Verifica se usu√°rio tem acesso adulto ativo"""
        session = self.db.get_active_adult_session(user_id)
        return session and not self.is_session_expired(session)

    def is_session_expired(self, session):
        """Verifica se sess√£o est√° expirada"""
        if session['expires_at']:
            expiry_time = datetime.fromisoformat(session['expires_at'])
            return datetime.now() > expiry_time
        return False

    def get_age_verification_question(self):
        """Retorna pergunta aleat√≥ria de verifica√ß√£o de idade"""
        import random
        return random.choice(self.age_verification_questions)

    def generate_verification_token(self, user_id):
        """Gera token √∫nico para processo de verifica√ß√£o"""
        data = f"{user_id}_{datetime.now().isoformat()}_{secrets.token_hex(8)}"
        return hashlib.sha256(data.encode()).hexdigest()[:16]

    def generate_session_token(self, user_id):
        """Gera token de sess√£o para acesso adulto"""
        data = f"session_{user_id}_{datetime.now().isoformat()}_{secrets.token_hex(16)}"
        return hashlib.sha256(data.encode()).hexdigest()[:32]

    def deactivate_adult_mode(self, user_id):
        """Desativa modo adulto para o usu√°rio"""
        active_session = self.db.get_active_adult_session(user_id)
        if active_session:
            self.db.deactivate_adult_session(user_id, 'user_request')
            return {
                'status': 'deactivated',
                'message': '‚úÖ Modo adulto desativado com sucesso!\n\nüîí Eron voltar√° ao modo normal.\n\nVoc√™ pode reativar a qualquer momento com /18'
            }
        else:
            return {
                'status': 'not_active',
                'message': '‚ö†Ô∏è Modo adulto n√£o estava ativo.\n\nPara ativar, use o comando /18'
            }

    def get_adult_config_menu(self, user_id):
        """Retorna menu de configura√ß√£o do modo adulto"""
        if not self.has_active_adult_access(user_id):
            return {
                'status': 'no_access',
                'message': '‚ùå Voc√™ n√£o tem acesso adulto ativo.\n\nPara ativar, use /18'
            }
        
        devassa_profile = self.db.get_devassa_profile(user_id)
        if not devassa_profile:
            # Criar perfil padr√£o
            self.db.save_devassa_profile(
                user_id,
                intensity_level=2,
                gender_preference='feminino',
                relationship_stage='inicial'
            )
            devassa_profile = self.db.get_devassa_profile(user_id)
        
        menu = f"""
üîû‚öôÔ∏è CONFIGURA√á√ïES MODO DEVASSA

üìä Status Atual:
‚Ä¢ Intensidade: {devassa_profile['intensity_level']}/3 ({self.get_intensity_description(devassa_profile['intensity_level'])})
‚Ä¢ G√™nero do Bot: {devassa_profile['gender_preference']}
‚Ä¢ Est√°gio: {devassa_profile['relationship_stage']}

üéöÔ∏è Ajustar Intensidade:
‚Ä¢ /intensidade1 - Suave (sensual, moderada)
‚Ä¢ /intensidade2 - Moderado (direta, provocante)
‚Ä¢ /intensidade3 - Intenso (expl√≠cita, muito provocante)

üé≠ Alterar G√™nero do Bot:
‚Ä¢ /genero_feminino - Bot com personalidade feminina
‚Ä¢ /genero_masculino - Bot com personalidade masculina
‚Ä¢ /genero_neutro - Bot com linguagem neutra

üîí Controles:
‚Ä¢ /devassa_off - Desativar modo adulto
‚Ä¢ /devassa_status - Ver status detalhado

‚ö†Ô∏è Lembre-se: Todas as altera√ß√µes s√£o aplicadas imediatamente!
        """
        
        return {
            'status': 'config_menu',
            'message': menu.strip()
        }

    def update_intensity(self, user_id, new_intensity):
        """Atualiza intensidade da linguagem"""
        if not self.has_active_adult_access(user_id):
            return {
                'status': 'no_access',
                'message': '‚ùå Voc√™ n√£o tem acesso adulto ativo.'
            }
        
        if 1 <= new_intensity <= 3:
            self.db.save_devassa_profile(user_id, intensity_level=new_intensity)
            description = self.get_intensity_description(new_intensity)
            
            return {
                'status': 'updated',
                'message': f'‚úÖ Intensidade atualizada para n√≠vel {new_intensity}!\n\nüìù {description}\n\nüî• As pr√≥ximas respostas j√° usar√£o o novo n√≠vel!'
            }
        else:
            return {
                'status': 'invalid_level',
                'message': '‚ùå N√≠vel inv√°lido! Use:\n‚Ä¢ /intensidade1 (Suave)\n‚Ä¢ /intensidade2 (Moderado)\n‚Ä¢ /intensidade3 (Intenso)'
            }

    def update_gender_preference(self, user_id, gender):
        """Atualiza prefer√™ncia de g√™nero do bot"""
        if not self.has_active_adult_access(user_id):
            return {
                'status': 'no_access',
                'message': '‚ùå Voc√™ n√£o tem acesso adulto ativo.'
            }
        
        valid_genders = ['feminino', 'masculino', 'neutro']
        if gender in valid_genders:
            self.db.save_devassa_profile(user_id, gender_preference=gender)
            
            gender_descriptions = {
                'feminino': 'Bot com personalidade feminina (ela se apresenta como mulher)',
                'masculino': 'Bot com personalidade masculina (ele se apresenta como homem)',
                'neutro': 'Bot com linguagem neutra (sem g√™nero espec√≠fico)'
            }
            
            return {
                'status': 'updated',
                'message': f'‚úÖ G√™nero do bot atualizado para {gender}!\n\nüìù {gender_descriptions[gender]}\n\nüî• As pr√≥ximas respostas j√° usar√£o a nova personalidade!'
            }
        else:
            return {
                'status': 'invalid_gender',
                'message': '‚ùå G√™nero inv√°lido! Use:\n‚Ä¢ /genero_feminino\n‚Ä¢ /genero_masculino\n‚Ä¢ /genero_neutro'
            }

    def get_intensity_description(self, level):
        """Retorna descri√ß√£o dos n√≠veis de intensidade"""
        descriptions = {
            1: "Suave - Linguagem sensual mas moderada",
            2: "Moderado - Linguagem mais direta e provocante", 
            3: "Intenso - Linguagem expl√≠cita e muito provocante"
        }
        return descriptions.get(level, "N√≠vel n√£o definido")

    def get_adult_status(self, user_id):
        """Retorna status detalhado do modo adulto"""
        if not self.has_active_adult_access(user_id):
            return {
                'status': 'inactive',
                'message': 'üîí Modo adulto n√£o est√° ativo.\n\nPara ativar, use /18'
            }
        
        session = self.db.get_active_adult_session(user_id)
        devassa_profile = self.db.get_devassa_profile(user_id)
        verification = self.db.get_latest_verification(user_id)
        
        status_message = f"""
üîûüìä STATUS DO MODO ADULTO

‚úÖ Acesso: ATIVO
üìÖ Ativado em: {session['created_at'][:19]}
üîë Sess√£o expira: {session['expires_at'][:19] if session['expires_at'] else 'Sem expira√ß√£o'}

üë§ Perfil Devassa:
‚Ä¢ Intensidade: {devassa_profile['intensity_level']}/3
‚Ä¢ G√™nero Bot: {devassa_profile['gender_preference']}
‚Ä¢ Est√°gio: {devassa_profile['relationship_stage']}

üìà Estat√≠sticas:
‚Ä¢ Intera√ß√µes adultas: {devassa_profile.get('interaction_count', 0)}
‚Ä¢ √öltima intera√ß√£o: {devassa_profile.get('last_interaction', 'Nunca')}

üîê Seguran√ßa:
‚Ä¢ Verifica√ß√£o de idade: ‚úÖ Verificada
‚Ä¢ Data verifica√ß√£o: {verification['created_at'][:19] if verification else 'N/A'}

‚öôÔ∏è Para configurar: /devassa_config
üîí Para desativar: /devassa_off
        """
        
        return {
            'status': 'active_status',
            'message': status_message.strip()
        }

    def revoke_access(self, user_id, reason='user_request'):
        """Revoga acesso adulto e remove dados sens√≠veis"""
        # Desativar sess√£o
        self.db.deactivate_adult_session(user_id, reason)
        
        # Remover perfil devassa (opcional - manter hist√≥rico)
        # self.db.delete_devassa_profile(user_id)
        
        # Log de seguran√ßa
        self.db.log_security_event(
            user_id,
            'access_revoked',
            {'reason': reason, 'timestamp': datetime.now().isoformat()}
        )
        
        return {
            'status': 'revoked',
            'message': 'üîí Acesso adulto revogado com sucesso!\n\n‚úÖ Todos os dados de sess√£o foram removidos.\n\nVoc√™ pode reativar a qualquer momento com /18'
        }