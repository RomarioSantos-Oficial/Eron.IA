#!/usr/bin/env python3
"""
üîç VERIFICA√á√ÉO FINAL COMPLETA DO SISTEMA ORGANIZADO
Testar todos os componentes ap√≥s reorganiza√ß√£o
"""

import os
import sys
import subprocess

def verificacao_completa():
    print('üîç VERIFICA√á√ÉO FINAL - SISTEMA ORGANIZADO')
    print('=' * 60)
    
    # 1. Verificar estrutura de pastas
    print('üìÅ VERIFICANDO ESTRUTURA DE PASTAS:')
    pastas_esperadas = {
        'tools/': 'Ferramentas e utilit√°rios',
        'tools/expansion/': 'Scripts de expans√£o de conte√∫do',
        'tests/system/': 'Testes do sistema',
        'docs/': 'Documenta√ß√£o',
        'outros/': 'Arquivos diversos',
        'web/': 'Interface web',
        'telegram_bot/': 'Bot do Telegram',
        'core/': 'M√≥dulos principais',
        'learning/': 'Sistemas de aprendizagem',
        'database/': 'Banco de dados'
    }
    
    for pasta, descricao in pastas_esperadas.items():
        if os.path.exists(pasta):
            arquivos = len([f for f in os.listdir(pasta) if os.path.isfile(os.path.join(pasta, f))])
            print(f'   ‚úÖ {pasta}: {descricao} ({arquivos} arquivos)')
        else:
            print(f'   ‚ùå {pasta}: N√ÉO ENCONTRADA')
    
    # 2. Verificar arquivos na raiz
    print(f'\\nüìã VERIFICANDO ARQUIVOS NA RAIZ:')
    arquivos_raiz_esperados = [
        'run_all.py', '.env', '.gitignore', 'README.md', 
        'requirements.txt', 'SECURITY.md', 'setup.py'
    ]
    
    arquivos_na_raiz = [f for f in os.listdir('.') if os.path.isfile(f)]
    
    for arquivo in arquivos_na_raiz:
        if arquivo in arquivos_raiz_esperados or arquivo.startswith('.'):
            print(f'   ‚úÖ {arquivo}')
        else:
            print(f'   ‚ö†Ô∏è  {arquivo} (pode ser movido)')
    
    # 3. Testar importa√ß√µes principais
    print(f'\\nüîß TESTANDO IMPORTA√á√ïES:')
    
    imports_teste = [
        ('core.knowledge_base', 'KnowledgeBase'),
        ('core.memory', 'EronMemory'),
        ('learning.fast_learning', 'FastLearning'),
        ('learning.advanced_adult_learning', 'advanced_adult_learning'),
        ('core.check', 'AdultAccessSystem')
    ]
    
    sys.path.append('.')  # Adicionar raiz ao path
    
    for modulo, classe in imports_teste:
        try:
            exec(f'from {modulo} import {classe}')
            print(f'   ‚úÖ {modulo}.{classe}')
        except Exception as e:
            print(f'   ‚ùå {modulo}.{classe}: {str(e)[:50]}...')
    
    # 4. Verificar banco de dados
    print(f'\\nüíæ VERIFICANDO BANCOS DE DADOS:')
    databases_esperadas = [
        'database/advanced_adult.db',
        'database/super_learning.db',
        'memoria/eron_memory.db'
    ]
    
    for db in databases_esperadas:
        if os.path.exists(db):
            size_mb = os.path.getsize(db) / (1024 * 1024)
            print(f'   ‚úÖ {db} ({size_mb:.1f} MB)')
        else:
            print(f'   ‚ö†Ô∏è  {db}: N√ÉO ENCONTRADO')
    
    # 5. Contar conte√∫do adulto
    print(f'\\nüî• VERIFICANDO CONTE√öDO ADULTO:')
    try:
        import sqlite3
        conn = sqlite3.connect('database/advanced_adult.db')
        total = conn.execute('SELECT COUNT(*) FROM adult_content').fetchone()[0]
        print(f'   ‚úÖ {total} respostas adultas dispon√≠veis')
        
        # Por categoria
        categories = conn.execute('SELECT category, COUNT(*) FROM adult_content GROUP BY category').fetchall()
        for category, count in categories:
            print(f'      ‚Ä¢ {category.upper()}: {count}')
        
        conn.close()
    except Exception as e:
        print(f'   ‚ùå Erro ao verificar conte√∫do: {str(e)}')
    
    # 6. Verificar tools
    print(f'\\nüõ†Ô∏è  VERIFICANDO FERRAMENTAS:')
    tools = [
        'tools/check_adult_mode.py',
        'tools/check_db.py',
        'tools/expansion/expand_adult_content.py',
        'tools/expansion/mega_expansion_adult.py',
        'tools/expansion/ultra_mega_expansion.py'
    ]
    
    for tool in tools:
        if os.path.exists(tool):
            print(f'   ‚úÖ {tool}')
        else:
            print(f'   ‚ùå {tool}: N√ÉO ENCONTRADO')
    
    # 7. Verificar testes
    print(f'\\nüß™ VERIFICANDO TESTES:')
    testes = [
        'tests/system/teste_sistema_final.py',
        'tests/system/test_adult_system.py',
        'tests/system/verificar_sistema_adulto.py'
    ]
    
    for teste in testes:
        if os.path.exists(teste):
            print(f'   ‚úÖ {teste}')
        else:
            print(f'   ‚ùå {teste}: N√ÉO ENCONTRADO')
    
    print(f'\\nüéâ VERIFICA√á√ÉO COMPLETA!')
    print(f'‚úÖ Projeto organizado com sucesso')
    print(f'üìÅ Estrutura limpa e profissional')
    print(f'üöÄ Pronto para uso com run_all.py')

def teste_sistema():
    """Teste r√°pido do sistema principal"""
    print(f'\\nüöÄ TESTE FINAL DO SISTEMA:')
    print('=' * 50)
    
    try:
        # Teste do run_all.py
        print('üîÑ Testando run_all.py...')
        result = subprocess.run([sys.executable, 'run_all.py', '--help'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print('‚úÖ run_all.py funciona corretamente')
        else:
            print(f'‚ùå Erro no run_all.py: {result.stderr}')
            
    except subprocess.TimeoutExpired:
        print('‚ö†Ô∏è  run_all.py timeout (normal para teste)')
    except Exception as e:
        print(f'‚ùå Erro ao testar run_all.py: {e}')
    
    # Teste dos tools
    print(f'\\nüõ†Ô∏è  Testando ferramentas:')
    
    try:
        # Teste do check_db
        if os.path.exists('tools/check_db.py'):
            result = subprocess.run([sys.executable, 'tools/check_db.py'], 
                                  capture_output=True, text=True, timeout=10)
            if 'database' in result.stdout.lower():
                print('‚úÖ tools/check_db.py funciona')
            else:
                print('‚ö†Ô∏è  tools/check_db.py com warnings')
        
    except Exception as e:
        print(f'‚ùå Erro ao testar tools: {e}')
    
    print(f'\\nüéä SISTEMA TOTALMENTE ORGANIZADO E FUNCIONAL!')

if __name__ == '__main__':
    verificacao_completa()
    teste_sistema()